generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  paymentLinks PaymentLink[]
  payments     Payment[]
  
  @@map("users")
}

model PaymentLink {
  id              String   @id @default(cuid())
  amount          Decimal
  currency        String   // USD, EUR, ETH, USDC
  acceptedTokens  String[] // Array of token symbols
  description     String?
  expiresAt       DateTime?
  status          String   @default("active") // active, paid, expired, cancelled
  
  // Customization
  logoUrl         String?
  primaryColor    String   @default("#3B82F6")
  businessName    String?
  successMessage  String   @default("Payment successful!")
  termsConditions String?
  
  // Metadata
  ipfsHash        String?
  qrCodeUrl       String?
  shortUrl        String   @unique
  
  // Analytics
  views           Int      @default(0)
  conversionRate  Decimal  @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  createdBy       String
  user            User     @relation(fields: [createdBy], references: [id])
  payments        Payment[]
  
  @@map("payment_links")
}

model Payment {
  id              String   @id @default(cuid())
  amount          Decimal
  token           String   // ETH, USDC, DAI, etc.
  network         String   // ethereum, polygon, bsc, arbitrum
  
  // Blockchain data
  txHash          String   @unique
  fromAddress     String
  toAddress       String
  blockNumber     Int?
  gasUsed         Decimal?
  gasFee          Decimal?
  
  // Payment status
  status          String   @default("pending") // pending, confirmed, failed
  confirmations   Int      @default(0)
  
  // Metadata
  exchangeRate    Decimal? // Rate at time of payment
  fiatAmount      Decimal? // Converted fiat amount
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  paymentLinkId   String
  paymentLink     PaymentLink @relation(fields: [paymentLinkId], references: [id])
  
  paidBy          String?
  user            User?    @relation(fields: [paidBy], references: [id])
  
  @@map("payments")
}

model WebhookEndpoint {
  id        String   @id @default(cuid())
  url       String
  events    String[] // payment.completed, payment.failed, link.expired
  secret    String
  active    Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())
  
  @@map("webhook_endpoints")
}